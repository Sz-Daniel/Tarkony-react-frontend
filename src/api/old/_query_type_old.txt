export const testIdNameQuery = `
 query {
    itemCategories {
      id
      name
    }
  }`


  export const categoryListQuery = {
    name: 'categoryListQuery',
    query:`   
    query {
    itemCategories {
        id
        name
        normalizedName
        children {
          id
        }
        parent {
          id
        }
      }
    }`
  }




//AllAttrItemList
const MAIN_ITEM_LIST = `
    fragment MainItemList on Item {
      	id, 
        name, 
        normalizedName, 
        shortName, 
        description, 
        basePrice, 
        updated, 
        width, 
        height, 
        backgroundColor, 
        iconLink, 
        gridImageLink, 
        baseImageLink, 
        inspectImageLink, 
        image512pxLink, 
        image8xLink, 
        wikiLink, 
        types, 
        avg24hPrice, 
        properties{
          __typename
        },
        conflictingItems{
        	id,name
        },
        conflictingSlotIds, 
        accuracyModifier, 
        recoilModifier, 
        ergonomicsModifier,
        hasGrid, 
        blocksHeadphones, 
        link, 
        lastLowPrice, 
        changeLast48h, 
        changeLast48hPercent, 
        low24hPrice, 
        high24hPrice, 
        lastOfferCount, 
        sellFor{
          vendor{name, normalizedName,__typename},
          price,
          currency,
          currencyItem{id,name},
          priceRUB,
          __typename
        }, 
        buyFor{
                    vendor{name, normalizedName,__typename},
          price,
          currency,
          currencyItem{id,name},
          priceRUB,
          __typename
        }, 
        containsItems{
          item{id,name},
          count,
          quantity,
          attributes{type,name,value},
          __typename
        }, 
        category{id,name,normalizedName,parent{id},children{id},__typename}, 
        categories{id}, 
        bsgCategoryId, 
        handbookCategories{id,name,normalizedName,parent{id},children{id},__typename}, 
        weight, 
        velocity, 
        loudness, 
        usedInTasks{id,name,normalizedName,trader{id},map{id},experience,wikiLink}, 
        receivedFromTasks{id}, 
        bartersFor{id}, 
        bartersUsing{id}, 
        craftsFor{id}, 
        craftsUsing{id}, 
        historicalPrices{price,priceMin,timestamp}, 
        fleaMarketFee
    }`;

function buildQuery(fragment: string,fragmentName:string): string{
    return `
    ${fragment}
    query {
        items {
            ...${fragmentName}
        }
    }
    `;
}

//Everytime when it's expanded the fragments list, these data should update manually
//FragmentName|
export type GraphqlQueriesType = 'MainItemList' ;

//FragmentName: buildQuery(FRAGMANT_LITERAL, FragmentName)
export const queries = {
    MainItemList: buildQuery(MAIN_ITEM_LIST,'MainItemList'),
}

/**
 * 
 * const MAIN_ITEM_LIST = `
    fragment MainItemList on Item {
        id
        name
        description
        basePrice
        width
        height
        weight
        iconLink
        wikiLink
        category {
            name
        }
        properties{__typename}
    }`;
 */


    export type CategoryType = {
  id: number;
  name: string;
  normalizedName: string;
  children: {
    id: number
  }
  parent: {
    id: number
  }
};
  
  
  `   
    query{
      itemCategories {
        id
        name
        normalizedName
        children {
          id
        }
        parent {
          id
        }
      }
    }
  }`

export type testIdNameType = {
    id: number;
  name: string;
}



type Vendor = {
  name: string;
  normalizedName: string;
  __typename: string;
};

type CurrencyItem = {
  id: string;
  name: string;
};

type SellOrBuyFor = {
  vendor: Vendor;
  price: number;
  currency: string;
  currencyItem: CurrencyItem;
  priceRUB: number;
  __typename: string;
};

type Attributes = {
  type: string;
  name: string;
  value: string;
};

type ContainedItem = {
  item: {
    id: string;
    name: string;
  };
  count: number;
  quantity: number;
  attributes: Attributes[];
  __typename: string;
};

type Category = {
  id: string;
  name: string;
  normalizedName?: string;
  parent?: { id: string };
  children?: { id: string }[];
  __typename: string;
};

type Task = {
  id: string;
  name?: string;
  normalizedName?: string;
  trader?: { id?: string };
  map?: { id?: string };
  experience?: number;
  wikiLink?: string;
};

type HistoricalPrice = {
  price: number;
  priceMin: number;
  timestamp: string;
};

type Properties = {
  __typename: string;
  // Ide jöhetnek további properties mezők, ha ismertek
};

type ConflictingItem = {
  id: string;
  name: string;
};

export type Item = {
  id: string;
  name: string;
  normalizedName: string;
  shortName: string;
  description: string;
  basePrice: number;
  updated: string;
  width: number;
  height: number;
  backgroundColor: string;
  iconLink: string;
  gridImageLink: string;
  baseImageLink: string;
  inspectImageLink: string;
  image512pxLink: string;
  image8xLink: string;
  wikiLink: string;
  types: string[]; // pontosabb típus is lehet, ha tudod
  avg24hPrice?: number | null;
  properties: Properties;
  conflictingItems: ConflictingItem[];
  conflictingSlotIds: string[];
  accuracyModifier?: number | null;
  recoilModifier?: number | null;
  ergonomicsModifier?: number | null;
  hasGrid: boolean;
  blocksHeadphones: boolean;
  link: string;
  lastLowPrice?: number | null;
  changeLast48h?: number | null;
  changeLast48hPercent?: number | null;
  low24hPrice?: number | null;
  high24hPrice?: number | null;
  lastOfferCount?: number | null;
  sellFor: SellOrBuyFor[];
  buyFor: SellOrBuyFor[];
  containsItems: ContainedItem[];
  category: Category;
  categories: { id: string }[];
  bsgCategoryId: string;
  handbookCategories: Category[];
  weight: number;
  velocity: number;
  loudness: number;
  usedInTasks: Task[];
  receivedFromTasks: { id: string }[];
  bartersFor: { id: string }[];
  bartersUsing: { id: string }[];
  craftsFor: { id: string }[];
  craftsUsing: { id: string }[];
  historicalPrices: HistoricalPrice[];
  fleaMarketFee?: number | null;
};


  id: number,
  name: string,
  iconURL: string,
  traderPrice: number,
  traderName: string,
  lowestPrice: number,
  lastPrice: number,
  diffPrice: number,

